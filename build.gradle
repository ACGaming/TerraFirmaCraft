import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

def envVersion = System.getenv("version")
version = envVersion == null ? "dev" : envVersion
group = "net.dries007.tfc" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TerraFirmaCraft-Forge-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name 'Jitpack' // Used by mcjunitlib
        url 'https://jitpack.io'
    }
}

minecraft {
    // Mappings used are generated by Mappificator (https://github.com/alcatrazEscapee/mappificator)
    // See the project README page for how to generate the mapping set.
    // Otherwise, we use official mappings in a build script version
    def officialVersion = System.getenv("OFFICIAL_MAPPINGS")
    if (officialVersion == null) {
        mappings channel: 'snapshot', version: 'complete-20200912-1.16.3-v5'
    } else {
        mappings channel: 'official', version: minecraft_version
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                tfc {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                tfc {
                    source sourceSets.main
                }
            }
        }
        // todo: fix
/*
        serverTest {
            parent server // This run config inherits settings from the server config
            workingDirectory project.file('run')
            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher'
            // The main class which launches a customized server which then runs JUnit tests
            ideaModule "${project.name}.test" // Tell IDEA to use the classpath of the test module
            property 'forge.logging.console.level', 'unittest'
            // This logging level prevents any other server information messages and leaves only the unit test output
            environment 'MOD_CLASSES', String.join(File.pathSeparator,
                    "tfc%%${sourceSets.main.output.resourcesDir}",
                    "tfc%%${sourceSets.main.output.classesDir}",
                    "tfc%%${sourceSets.test.output.resourcesDir}",
                    "tfc%%${sourceSets.test.output.classesDir}",
            ) // Forge will ignore all test sources unless we explicitly tell it to include them as mod sources
            environment 'target', 'fmltestserver'
            // This is a custom service used to launch with ModLauncher's transforming class loader
            mods {
                tfc { // The mod that is being tested
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
*/
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // todo: fix
    //testImplementation fg.deobf("com.github.alcatrazEscapee:mcjunitlib:${mcjunitlib_version}-${minecraft_version}") {
    //    transitive = false
    //}
}

processResources {
    // Minify the json files in the output jar, reduces overall jar size.
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            file.text = file.text.replace('"__comment__":"This file was automatically created by mcresources",', '')
        }
    }
}
